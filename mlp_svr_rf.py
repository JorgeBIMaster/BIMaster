# -*- coding: utf-8 -*-
"""MLP_SVR_RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/JorgeBIMaster/8dfbf020f3acd8752059fb8412e29a28/mlp_svr_rf.ipynb

Importing libraries
"""

!pip install neupy
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import numpy as np
import pandas as pd
import seaborn as sns
from tqdm.notebook import tqdm
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader, ConcatDataset
from torch.utils.data import SubsetRandomSampler #split the dataset

from sklearn.preprocessing import MinMaxScaler    
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import math

from sklearn.model_selection import KFold

torch.manual_seed(0)
np.random.seed(0)

import random
random.seed(0)

"""Read Data"""

path = r"C:\Users\Yoiz Nu√±ez\.spyder-py3\Code\RegressionPytorch\dados_indoor_puc.csv"
df = pd.read_csv(path)
df.head()

"""Create Input and Output Data"""

X = df.iloc[:, 0:-1]
y = df.iloc[:, -1]

#Train - Validation - Test
# Train - Test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
#Normalize input
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train, y_train = np.array(X_train), np.array(y_train)
X_test, y_test = np.array(X_test), np.array(y_test)

#Normalize output
y_train = y_train.reshape(-1, 1)
y_train = scaler.fit_transform(y_train)
y_test = y_test.reshape(-1, 1)
y_test = scaler.transform(y_test)

#Convert Output Variable to Float
y_train, y_test = y_train.astype(float), y_test.astype(float),

"""Multi-layer Perceptron"""

mlpregressor = MLPRegressor(hidden_layer_sizes=144, 
                            activation='relu',
                            solver='lbfgs',
                            alpha=0.003,
                            learning_rate_init=0.01,
                            momentum=0.9,
                            random_state=1, 
                            max_iter=1000,
                            early_stopping=True)

mlpregressor.fit(X_train,np.ravel(y_train))
mlpregressor

predict_train = mlpregressor.predict(X_train)
y_pred = mlpregressor.predict(X_test)

y_pred = y_pred.reshape(-1,1)

y_pred_desn = scaler.inverse_transform(y_pred)
y_target_desn = scaler.inverse_transform(y_test)

MSE = np.square(np.subtract(y_target_desn,y_pred_desn)).mean()
RMSE_desn = math.sqrt(MSE)

from sklearn.metrics import r2_score
R2_score = r2_score(y_target_desn, y_pred_desn)

"""Support Vector Regression (SVR)"""

from sklearn.svm import SVR

regressor = SVR(kernel='rbf', degree=3, gamma='scale', coef0=0.0, tol=0.001, C=399, epsilon=0.001, 
                shrinking=True, cache_size=200, verbose=False, max_iter=-1)

regressor.fit(X_train,np.ravel(y_train))

y_pred = regressor.predict(X_test)
y_pred = y_pred.reshape(-1,1)

y_pred_desn = scaler.inverse_transform(y_pred)
y_target_desn = scaler.inverse_transform(y_test)

MSE = np.square(np.subtract(y_target_desn,y_pred_desn)).mean()
RMSE_desn = math.sqrt(MSE)

from sklearn.metrics import r2_score
R2_score = r2_score(y_target_desn, y_pred_desn)

"""Random Forest"""

from sklearn.ensemble import RandomForestRegressor

rfmodel = RandomForestRegressor(n_estimators=168)

rfmodel.fit(X_train, np.ravel(y_train))

y_pred = rfmodel.predict(X_test)

y_pred = y_pred.reshape(-1,1)

y_pred_desn = scaler.inverse_transform(y_pred)
y_target_desn = scaler.inverse_transform(y_test)

MSE = np.square(np.subtract(y_target_desn,y_pred_desn)).mean()
RMSE_desn = math.sqrt(MSE)

from sklearn.metrics import r2_score
R2_score = r2_score(y_target_desn, y_pred_desn)